m <- mean(data, ...)                    # calculate the mean for this vector
# (using additional arguments if provided in the <cachemean> function call)
x$setmean(m)                            # call the object-specific X$setmean function to store the calculated mean
# for future use
m                                       # the mean is the output of the <cachemean> function as called
}
makeVector <- function(x = numeric()) {
# I have commented this function after studying notes provided by Pavel Kirjanas (Thanks!)
# source: https://class.coursera.org/rprog-016/forum/thread?thread_id=96
# and some "googled" info on Object-Oriented-Programming in R
# Tetyana Margolina (Coursera R-Programming Dec 17, 2014)
# <makeVector> has a single input parameter: a numeric object x
# note that x can have more than 1 dimension
#(can be a flat vector, a matrix or an array with more than 2 dimensions)
# still, <mean> will always be applied to the underlying vector
# and thus will return a single number
m <- NULL                             # m will be used to store the mean value;
# <makeVector> sets it to NULL (or re-sets it to NULL),
# meaning that it has an undefined value
set <- function(y) {                  # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and can be called from elsewhere
x <<- y                             # re-define the x vector and cash it for future use
m <<- NULL                          # re-set its mean value to NULL, i.e. it is now undefined
}
get <- function() x                     # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the value of x as follows:
# x <- c(1, 2)
# y <- makeVector(x)
# y$get() --- returns the value of ([1] 1 2)
# note that {} are omitted in the function definition ==
# get <- function() {x}
setmean <- function(mean) m <<- mean    # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to set the value of m to the mean value of x
# when <cachemean> is called for the first time for a specific vector x;
# note that {} are omitted in the function definition ==
# setmean <- function(mean) {m <<- mean}
getmean <- function() m                 # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the mean value of vector x during the second abd subsequent calls
# of <cachemean> (until a new vector x is defined)
# note that {} are omitted in the function definition ==
# getmean <- function() {m}
# this object is a list of the above defined internal functions,
# which provides a way to access these object-specific methods
# from another function
list(set = set, get = get,...=
setmean = setmean, getmean = getmean)
# This object is defined "from scratch"
# each time <makeVector> is called for a specific object x
}
cachemean <- function(x, ...) {           # this function will calculate the mean of a vector or fetch its cached value
# ATTENTION: x is not the same as x in <makeVector>
# instead, the input parameter x is an object created by <makeVector> for a specific vector
# "..." are optional further arguments to be used by <mean> function
m <- x$getmean()                        # returnes the value of m, which has been stored in the object x
if (!is.null(m)) {                      # two options are possible here:
# (1) m is not NULL --- this means that <cachemean> has been called at least one for the object x,
# mean value of the specific vector has already been calculated
# it will be returned and the <cachemean> terminates here
message("getting cached data")        # this message will be outputted into RStudio console
return(m)
} # since the <cachemean> execution is terminated if the "if" condition is true,
# there is no need for a separate "else" block
# the rest of the function is only executed if the "if" condition is false, i.e. m == NULL,
# i.e. this is the first call of <cachemean> for the object x
data <- x$get()                         # get the value of the vector stored in the object x by <makeVector>
m <- mean(data, ...)                    # calculate the mean for this vector
# (using additional arguments if provided in the <cachemean> function call)
x$setmean(m)                            # call the object-specific X$setmean function to store the calculated mean
# for future use
m                                       # the mean is the output of the <cachemean> function as called
}
makeVector <- function(x = numeric()) {
# I have commented this function after studying notes provided by Pavel Kirjanas (Thanks!)
# source: https://class.coursera.org/rprog-016/forum/thread?thread_id=96
# and some "googled" info on Object-Oriented-Programming in R
# Tetyana Margolina (Coursera R-Programming Dec 17, 2014)
# <makeVector> has a single input parameter: a numeric object x
# note that x can have more than 1 dimension
#(can be a flat vector, a matrix or an array with more than 2 dimensions)
# still, <mean> will always be applied to the underlying vector
# and thus will return a single number
m <- NULL                             # m will be used to store the mean value;
# <makeVector> sets it to NULL (or re-sets it to NULL),
# meaning that it has an undefined value
set <- function(y) {                  # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and can be called from elsewhere
x <<- y                             # re-define the x vector and cash it for future use
m <<- NULL                          # re-set its mean value to NULL, i.e. it is now undefined
}
get <- function() x                     # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the value of x as follows:
# x <- c(1, 2)
# y <- makeVector(x)
# y$get() --- returns the value of ([1] 1 2)
# note that {} are omitted in the function definition ==
# get <- function() {x}
setmean <- function(mean) m <<- mean    # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to set the value of m to the mean value of x
# when <cachemean> is called for the first time for a specific vector x;
# note that {} are omitted in the function definition ==
# setmean <- function(mean) {m <<- mean}
getmean <- function() m                 # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the mean value of vector x during the second abd subsequent calls
# of <cachemean> (until a new vector x is defined)
# note that {} are omitted in the function definition ==
# getmean <- function() {m}
# this object is a list of the above defined internal functions,
# which provides a way to access these object-specific methods
# from another function
list(set = set, get = get, setmean = setmean, getmean = getmean)
# This object is defined "from scratch"
# each time <makeVector> is called for a specific object x
}
cachemean <- function(x, ...) {           # this function will calculate the mean of a vector or fetch its cached value
# ATTENTION: x is not the same as x in <makeVector>
# instead, the input parameter x is an object created by <makeVector> for a specific vector
# "..." are optional further arguments to be used by <mean> function
m <- x$getmean()                        # returnes the value of m, which has been stored in the object x
if (!is.null(m)) {                      # two options are possible here:
# (1) m is not NULL --- this means that <cachemean> has been called at least one for the object x,
# mean value of the specific vector has already been calculated
# it will be returned and the <cachemean> terminates here
message("getting cached data")        # this message will be outputted into RStudio console
return(m)
} # since the <cachemean> execution is terminated if the "if" condition is true,
# there is no need for a separate "else" block
# the rest of the function is only executed if the "if" condition is false, i.e. m == NULL,
# i.e. this is the first call of <cachemean> for the object x
data <- x$get()                         # get the value of the vector stored in the object x by <makeVector>
m <- mean(data, ...)                    # calculate the mean for this vector
# (using additional arguments if provided in the <cachemean> function call)
x$setmean(m)                            # call the object-specific X$setmean function to store the calculated mean
# for future use
m                                       # the mean is the output of the <cachemean> function as called
}
makeVector <- function(x = numeric()) {
# I have commented this function after studying notes provided by Pavel Kirjanas (Thanks!)
# source: https://class.coursera.org/rprog-016/forum/thread?thread_id=96
# and some "googled" info on Object-Oriented-Programming in R
# Tetyana Margolina (Coursera R-Programming Dec 17, 2014)
# <makeVector> has a single input parameter: a numeric object x
# note that x can have more than 1 dimension
#(can be a flat vector, a matrix or an array with more than 2 dimensions)
# still, <mean> will always be applied to the underlying vector
# and thus will return a single number
m <- NULL                             # m will be used to store the mean value;
# <makeVector> sets it to NULL (or re-sets it to NULL),
# meaning that it has an undefined value
set <- function(y) {                  # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and can be called from elsewhere
x <<- y                             # re-define the x vector and cash it for future use
m <<- NULL                          # re-set its mean value to NULL, i.e. it is now undefined
}
get <- function() x                     # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the value of x as follows:
# x <- c(1, 2)
# y <- makeVector(x)
# y$get() --- returns the value of ([1] 1 2)
# note that {} are omitted in the function definition ==
# get <- function() {x}
setmean <- function(mean) m <<- mean    # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to set the value of m to the mean value of x
# when <cachemean> is called for the first time for a specific vector x;
# note that {} are omitted in the function definition ==
# setmean <- function(mean) {m <<- mean}
getmean <- function() m                 # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the mean value of vector x during the second abd subsequent calls
# of <cachemean> (until a new vector x is defined)
# note that {} are omitted in the function definition ==
# getmean <- function() {m}
# this object is a list of the above defined internal functions,
# which provides a way to access these object-specific methods
# from another function
list(set = set, get = get,
setmean = setmean, getmean = getmean)
# This object is defined "from scratch"
# each time <makeVector> is called for a specific object x
}
cachemean <- function(x, ...) {           # this function will calculate the mean of a vector or fetch its cached value
# ATTENTION: x is not the same as x in <makeVector>
# instead, the input parameter x is an object created by <makeVector> for a specific vector
# "..." are optional further arguments to be used by <mean> function
m <- x$getmean()                        # returnes the value of m, which has been stored in the object x
if (!is.null(m)) {                      # two options are possible here:
# (1) m is not NULL --- this means that <cachemean> has been called at least one for the object x,
# mean value of the specific vector has already been calculated
# it will be returned and the <cachemean> terminates here
message("getting cached data")        # this message will be outputted into RStudio console
return(m)
} # since the <cachemean> execution is terminated if the "if" condition is true,
# there is no need for a separate "else" block
# the rest of the function is only executed if the "if" condition is false, i.e. m == NULL,
# i.e. this is the first call of <cachemean> for the object x
data <- x$get()                         # get the value of the vector stored in the object x by <makeVector>
m <- mean(data, ...)                    # calculate the mean for this vector
# (using additional arguments if provided in the <cachemean> function call)
x$setmean(m)                            # call the object-specific X$setmean function to store the calculated mean
# for future use
m                                       # the mean is the output of the <cachemean> function as called
}
makeVector <- function(x = numeric()) {
# I have commented this function after studying notes provided by Pavel Kirjanas (Thanks!)
# source: https://class.coursera.org/rprog-016/forum/thread?thread_id=96
# and some "googled" info on Object-Oriented-Programming in R
# Tetyana Margolina (Coursera R-Programming Dec 17, 2014)
# <makeVector> has a single input parameter: a numeric object x
# note that x can have more than 1 dimension
#(can be a flat vector, a matrix or an array with more than 2 dimensions)
# still, <mean> will always be applied to the underlying vector
# and thus will return a single number
m <- NULL                             # m will be used to store the mean value;
# <makeVector> sets it to NULL (or re-sets it to NULL),
# meaning that it has an undefined value
set <- function(y) {                  # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and can be called from elsewhere
x <<- y                             # re-define the x vector and cash it for future use
m <<- NULL                          # re-set its mean value to NULL, i.e. it is now undefined
}
get <- function() x                     # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the value of x as follows:
# x <- c(1, 2)
# y <- makeVector(x)
# y$get() --- returns the value of ([1] 1 2)
# note that {} are omitted in the function definition ==
# get <- function() {x}
setmean <- function(mean) m <<- mean    # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to set the value of m to the mean value of x
# when <cachemean> is called for the first time for a specific vector x;
# note that {} are omitted in the function definition ==
# setmean <- function(mean) {m <<- mean}
getmean <- function() m                 # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the mean value of vector x during the second abd subsequent calls
# of <cachemean> (until a new vector x is defined)
# note that {} are omitted in the function definition ==
# getmean <- function() {m}
# this object is a list of the above defined internal functions,
# which provides a way to access these object-specific methods
# from another function
list(set = set, get = get,
setmean = setmean, getmean = getmean)
# This object is defined "from scratch"
# each time <makeVector> is called for a specific object x
}
cachemean <- function(x, ...) {           # this function will calculate the mean of a vector or fetch its cached value
# ATTENTION: x is not the same as x in <makeVector>
# instead, the input parameter x is an object created by <makeVector> for a specific vector
# "..." are optional further arguments to be used by <mean> function
m <- x$getmean()                        # returnes the value of m, which has been stored in the object x
if (!is.null(m)) {                      # two options are possible here:
# (1) m is not NULL --- this means that <cachemean> has been called at least one for the object x,
# mean value of the specific vector has already been calculated
# it will be returned and the <cachemean> terminates here
message("getting cached data")        # this message will be outputted into RStudio console
return(m)
} # since the <cachemean> execution is terminated if the "if" condition is true,
# there is no need for a separate "else" block
# the rest of the function is only executed if the "if" condition is false, i.e. m == NULL,
# i.e. this is the first call of <cachemean> for the object x
data <- x$get()                         # get the value of the vector stored in the object x by <makeVector>
m <- mean(data, ...)                    # calculate the mean for this vector
# (using additional arguments if provided in the <cachemean> function call)
x$setmean(m)                            # call the object-specific X$setmean function to store the calculated mean
# for future use
m                                       # the mean is the output of the <cachemean> function as called
}
bV <- makeVector(1:10)
bV
cachemean(bV)
cachemean(bV)
bv$set(50:60)
bV$set(50:60)
cachemean(bV)
cachemean(bV)
bV$get()
bV$m
cachemean(bV)
makeVector <- function(x = numeric()) {
# I have commented this function after studying notes provided by Pavel Kirjanas (Thanks!)
# source: https://class.coursera.org/rprog-016/forum/thread?thread_id=96
# and some "googled" info on Object-Oriented-Programming in R
# Tetyana Margolina (Coursera R-Programming Dec 17, 2014)
# <makeVector> has a single input parameter: a numeric object x
# note that x can have more than 1 dimension
#(can be a flat vector, a matrix or an array with more than 2 dimensions)
# still, <mean> will always be applied to the underlying vector
# and thus will return a single number
m <- NULL                             # m will be used to store the mean value;
# <makeVector> sets it to NULL (or re-sets it to NULL),
# meaning that it has an undefined value
set <- function(y) {                  # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and can be called from elsewhere
x <<- y                             # re-define the x vector and cash it for future use
m <<- NULL                          # re-set its mean value to NULL, i.e. it is now undefined
}
get <- function() x                     # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the value of x as follows:
# x <- c(1, 2)
# y <- makeVector(x)
# y$get() --- returns the value of ([1] 1 2)
# note that {} are omitted in the function definition ==
# get <- function() {x}
setmean <- function(mean) m <<- mean    # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to set the value of m to the mean value of x
# when <cachemean> is called for the first time for a specific vector x;
# note that {} are omitted in the function definition ==
# setmean <- function(mean) {m <<- mean}
getmean <- function() m                 # this is an object-specific [internal] function, a "method"
# it is defined within <makeVector> and called from <cachemean>
# to fetch the mean value of vector x during the second abd subsequent calls
# of <cachemean> (until a new vector x is defined)
# note that {} are omitted in the function definition ==
# getmean <- function() {m}
# this object is a list of the above defined internal functions,
# which provides a way to access these object-specific methods
# from another function
list(set = set, get = get, setmean = setmean, getmean = getmean)
# This object is defined "from scratch"
# each time <makeVector> is called for a specific object x
}
cachemean <- function(x, ...) {           # this function will calculate the mean of a vector or fetch its cached value
# ATTENTION: x is not the same as x in <makeVector>
# instead, the input parameter x is an object created by <makeVector> for a specific vector
# "..." are optional further arguments to be used by <mean> function
m <- x$getmean()                        # returnes the value of m, which has been stored in the object x
if (!is.null(m)) {                      # two options are possible here:
# (1) m is not NULL --- this means that <cachemean> has been called at least one for the object x,
# mean value of the specific vector has already been calculated
# it will be returned and the <cachemean> terminates here
message("getting cached data")        # this message will be outputted into RStudio console
return(m)
} # since the <cachemean> execution is terminated if the "if" condition is true,
# there is no need for a separate "else" block
# the rest of the function is only executed if the "if" condition is false, i.e. m == NULL,
# i.e. this is the first call of <cachemean> for the object x
data <- x$get()                         # get the value of the vector stored in the object x by <makeVector>
m <- mean(data, ...)                    # calculate the mean for this vector
# (using additional arguments if provided in the <cachemean> function call)
x$setmean(m)                            # call the object-specific X$setmean function to store the calculated mean
# for future use
m                                       # the mean is the output of the <cachemean> function as called
}
a <- makeVector(c(1, 2, 3, 4))
a
a$get()
a$getmean()
cachemean(a)
cachemean(a)
a$set(c(10, 20, 30, 40))
a$get()
a$getmean()
cachemean(a)
cachemean(a)
crazy <- function() {
x <<- 3.14
}
crazy
class(crazy)
crazy()
x <- 3.14
crazy()
crazy()
}
crazy <- function() {
x <- 3.14
}
crazy()
source('C:/Users/Tetyana/Desktop/crazy.R')
crazy()
class(x)
source('C:/Users/Tetyana/Desktop/crazy.R')
x <- 0
print(x)
crazy()
print(x)
getwd()
setwd("C:/!COURSERA")
dir
dir()
edit(makeMatrix)
edit("makeMatrix.R)
""
)
")"
edit("makeMatrix.R")
?solve
A <- matrix(1, 2, 3, 4), nrow - 2, ncol = 2)
A <- matrix(c(1, 2, 3, 4), nrow - 2, ncol = 2)
A <- matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2)
A
B <- solve(A)
B
source('C:/!COURSERA/makeCacheMatrix.R')
source('C:/!COURSERA/makeCacheMatrix.R')
source('C:/!COURSERA/cacheSolve.R')
amatrix <- makeCacheMatrix (matrix(c(1, 2, 3, 4), nrow = 2, ncol = 2))
amatrix
amatrix$get()
cacheSolve(amatrix)
amatrix$getsolve()
cachesolve(amatrix)
cacheSolve(amatrix)
amatrix$set(matrix(c(0, 5, 99, 66), nrow = 2, ncol = 2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getsolve()
cacheSolve(amatrix)
A <- read.data("A500")
A <- read.table("A500")
names(A)
View(A)
?read.csv
A = scan("A500")
A <- matrix(A,500,500)
class(A)
source('C:/!COURSERA/makeCacheMatrix.R')
source('C:/!COURSERA/cacheSolve.R')
amatrix <- makeCacheMatrix(A)
amatrix
B <- cacheSolve(amatrix)
B <- cacheSolve(amatrix)
B[1:5,1:5]
A[1:5,1:5]
A[1:5,1:5] / 1e8
C <- A * B
C(1:5,1:5)
C[1:5,1:5]
a = matrix([1, 2, 3, 4])
a = matrix(c(1, 2, 3, 4),2,2
)
a
solve(a)
amatrix <- makeCacheMatrix(a)
cacheSolve(amatrix)
cacheSolve(amatrix)
?solve
B1 = qr(A)
B1
names(qr)
B1
names(B1)
C1 <- solve(qr(a))
B1 <- solve(qr(A))
B1 <- solve(qr(A, LAPACK = TRUE))
B1[1:5, 1:5]
A[1:5, 1:5]
source('C:/!COURSERA/cacheSolve.R')
source('C:/!COURSERA/makeCacheMatrix.R')
source('C:/!COURSERA/makeCacheMatrix.R')
source('C:/!COURSERA/cacheSolve.R')
source('C:/!COURSERA/makeCacheMatrix.R')
set.seed(77)
m <- matrix(sample.int(100,size=9,replace=TRUE), nrow=3)
d <- makeCacheMatrix(m)
cacheSolve(d)
set.seed(77)
m <- matrix(sample.int(100,size=16,replace=TRUE), nrow=4)
d <- makeCacheMatrix(m)
cacheSolve(d)
set.seed(77)
m <- matrix(sample.int(100,size=10000,replace=TRUE), nrow=100)
d <- makeCacheMatrix(m)
system.time(cacheSolve(d))
system.time(cacheSolve(d))
set.seed(77)
m <- matrix(sample.int(100,size=9,replace=TRUE), nrow=3)
d <- makeCacheMatrix(m)
cacheSolve(d)
d$set(m)
cacheSolve(d)
setwd("C:\Users\Tetyana\ProgrammingAssignment2")
setwd("C:/Users/Tetyana/ProgrammingAssignment2")
dir
dir()
source('C:/Users/Tetyana/ProgrammingAssignment2/cachematrix.R')
set.seed(77)
m <- matrix(sample.int(100,size=9,replace=TRUE), nrow=3)
d <- makeCacheMatrix(m)
cacheSolve(d)
set.seed(77)
m <- matrix(sample.int(100,size=16,replace=TRUE), nrow=4)
d <- makeCacheMatrix(m)
cacheSolve(d)
set.seed(77)
m <- matrix(sample.int(100,size=10000,replace=TRUE), nrow=100)
d <- makeCacheMatrix(m)
system.time(cacheSolve(d))
system.time(cacheSolve(d))
makeCacheMatrix(m)
cacheSolve(d)
A <- cacheSolve(d)
A[1:10,1:5]
A <- cacheSolve(d)
A[1:10,1:5]
A*m
?solve
?*
TODO
source('C:/Users/Tetyana/ProgrammingAssignment2/cachematrix.R')
